A. Umum : 
1. Axios adalah pustaka (library) berbasis JavaScript yang digunakan untuk melakukan HTTP request dengan cara yang sederhana dan efisien. 
----------------------------------------------------------------------
2. Axios sering digunakan dalam aplikasi berbasis web untuk berkomunikasi dengan server atau API (Application Programming Interface).
----------------------------------------------------------------------




B. Beberapa fitur utama dari Axios :
1. Promise-based : Axios menggunakan promise, yang membuatnya lebih mudah untuk menangani operasi asinkron. Kamu bisa menggunakan .then() dan .catch() untuk menangani hasil request dan error.
----------------------------------------------------------------------
2. Mendukung request secara otomatis diubah menjadi JSON : Jika kamu mengirimkan data melalui POST, PUT, atau PATCH, Axios secara otomatis mengubah objek JavaScript menjadi JSON.
----------------------------------------------------------------------
3. Dukungan untuk async/await : kamu bisa menggunakan async dan await untuk menulis kode yang lebih mudah dibaca.
----------------------------------------------------------------------
4. Interceptors: Axios mendukung interceptors untuk memodifikasi request atau response sebelum diproses lebih lanjut.
----------------------------------------------------------------------
5. Mendukung pengiriman header custom: Axios memungkinkan Anda untuk mengirimkan header custom dengan mudah.
----------------------------------------------------------------------
6. Mendukung request dan response data dalam format JSON, array buffer, form data, dll.
----------------------------------------------------------------------
7. Mendukung request berbasis CORS: Jika Anda melakukan request ke domain berbeda, Axios secara otomatis menangani CORS.
----------------------------------------------------------------------





C. Cara menggunakan `Axios` untuk melakukan request API : 
1. Menggunakan HTTP GET Request :
<----
axios.get('https://api.example.com/data')
  .then(response => {
    console.log(response.data); // Mengolah data yang diterima
  })
  .catch(error => {
    console.error('Error:', error); // Menangani error
  });
---->
// Penjelasan :
*  axios.get() melakukan request GET ke URL yang ditentukan.
*  Jika request berhasil, Anda bisa mengakses data yang diterima melalui response.data.
*  Jika request gagal, error bisa ditangani dalam catch().
----------------------------------------------------------------------
----------------------------------------------------------------------
2. Menggunakan HTTP POST Request :
<----
axios.post('https://api.example.com/data', {
  name: 'John Doe',
  age: 30
})
  .then(response => {
    console.log(response.data); // Mengolah data yang diterima
  })
  .catch(error => {
    console.error('Error:', error); // Menangani error
  });
---->
// Penjelasan :
*  axios.post() digunakan untuk mengirim data ke server. Data yang akan dikirim (seperti objek JSON) ditambahkan sebagai parameter kedua.
*  Sama seperti GET, hasilnya dapat ditangani dalam then() dan errornya dalam catch().
----------------------------------------------------------------------
----------------------------------------------------------------------
3. Menggunakan Async/Await : 
<----
async function fetchData() {
  try {
    const response = await axios.get('https://api.example.com/data');
    console.log(response.data); // Mengolah data yang diterima
  } catch (error) {
    console.error('Error:', error); // Menangani error
  }
}

fetchData();
---->
// Penjelasan : 
*  Dengan menggunakan async dan await, kamu bisa menunggu hingga request selesai dan langsung menangani hasil atau error dalam try-catch.
----------------------------------------------------------------------
----------------------------------------------------------------------
4. Mengirimkan Header Custom :
<----
axios.get('https://api.example.com/data', {
  headers: {
    'Authorization': 'Bearer your_token_here',
    'Accept': 'application/json'
  }
})
  .then(response => {
    console.log(response.data);
  })
  .catch(error => {
    console.error('Error:', error);
  });
---->
// Penjelasan : 
*  Kamu dapat mengirimkan header custom dengan menambahkannya ke dalam objek konfigurasi sebagai parameter kedua.
----------------------------------------------------------------------
----------------------------------------------------------------------
5. Menggunakan Axios Iterceptros : 
<----
axios.interceptors.request.use(request => {
  console.log('Starting Request', request);
  return request;
});

axios.interceptors.response.use(response => {
  console.log('Response:', response);
  return response;
});
---->
// Penjelasan :
*  Interceptors memungkinkan anda memodifikasi request atau response sebelum diproses lebih lanjut, berguna untuk authentikasi, logging, dll.
----------------------------------------------------------------------
----------------------------------------------------------------------




D. Keuntungan menggunakan Axios : 
1. Sintaks yang lebih bersih dan mudah dibaca dibandingkan dengan penggunaan XMLHttpRequest atau fetch.
----------------------------------------------------------------------
2. Fleksibilitas untuk menangani berbagai jenis request (GET, POST, PUT, DELETE, dll.)
----------------------------------------------------------------------
3. Penanganan error yang lebih baik, misalnya dalam kasus status HTTP yang gagal (4xx dan 5xx).
----------------------------------------------------------------------
4. Dukungan untuk fitur lanjutan seperti interceptors, pengaturan timeout, pembatalan request, dan penanganan respon yang otomatis diubah menjadi JSON.
----------------------------------------------------------------------
----------------------------------------------------------------------




E. Contoh Penggunaan Axios dengan API :
1. Kamu ingin mengambil data dari API pengguna dengan menggunakan Axios :
<----
axios.get('https://jsonplaceholder.typicode.com/users')
  .then(response => {
    console.log(response.data); // Menampilkan daftar pengguna dari API
  })
  .catch(error => {
    console.error('Error fetching data:', error); // Menangani kesalahan jika terjadi
  });
---->
// Penjelasan :
*  Di sini, Axios mempermudah proses pengambilan data dari API dengan cara yang lebih sederhana dibandingkan dengan penggunaan fetch atau XMLHttpRequest.
----------------------------------------------------------------------
----------------------------------------------------------------------














