A. Umum :
1. Dalam JavaScript, fetch adalah API modern untuk membuat permintaan HTTP, dan kita dapat menangani hasilnya menggunakan dua pendekatan umum: dengan then-catch atau dengan try-catch.
--------------------------------------------------------------------








B. Pendekatan `fetch` dengan .then dan .catch
1. Ini adalah cara yang paling umum dan tradisional untuk menangani promise dalam JavaScript. 
2. Di sini, kita menggunakan metode then() untuk menangani respons yang berhasil dan catch() untuk menangani error.
3. Contoh :
<----
fetch('https://api.example.com/data')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();  // Mengubah respons menjadi JSON
  })
  .then(data => {
    console.log('Success:', data);  // Mengolah data yang diterima
  })
  .catch(error => {
    console.error('Error:', error);  // Menangani kesalahan
  });
---->
// Penjelasan :
1. then() menangani hasil dari promise yang berhasil. Jika respons diterima dengan baik, data akan diproses di sini.
--------------------------------------------------------------------
2. catch() menangani kesalahan jika ada masalah dalam permintaan atau jika ada error dalam salah satu tahap then().
--------------------------------------------------------------------
--------------------------------------------------------------------






C. Keunggulan (then-catch) : 
1. Lebih mudah digunakan dan dipahami oleh pemula.
--------------------------------------------------------------------
2. Mudah digunakan untuk rantai operasi (chaining).
--------------------------------------------------------------------





D. Keterbatasan then-catch :
1. Jika Anda memiliki banyak operasi asinkron berurutan, kode bisa menjadi kurang terstruktur dan sulit dibaca.
--------------------------------------------------------------------
2. Penanganan error hanya terjadi dalam .catch() dan bisa menjadi kurang intuitif jika digunakan dengan banyak then().
--------------------------------------------------------------------
--------------------------------------------------------------------




E. Pendekatan fetch dengan async-await dan try-catch
1. Pendekatan ini menggunakan sintaks async-await, yang lebih modern dan sering kali dianggap lebih bersih dan lebih mudah dibaca, terutama untuk operasi asinkron yang kompleks.
--------------------------------------------------------------------
2. Contoh :
<----
async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data');
    
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const data = await response.json();  // Mengubah respons menjadi JSON
    console.log('Success:', data);  // Mengolah data yang diterima

  } catch (error) {
    console.error('Error:', error);  // Menangani kesalahan
  }
}

fetchData();
---->
*  Penjelasan:
1. await digunakan untuk menunggu hasil dari promise. Kode ini membuat permintaan terlihat sinkron, sehingga lebih mudah dipahami.
2. try-catch digunakan untuk menangani error, baik yang berasal dari fetch maupun dari proses lain yang mungkin gagal.
--------------------------------------------------------------------





F. Keunggulan async-await dengan try-catch :
1. Membuat kode lebih bersih dan terstruktur, mirip dengan kode sinkron.
--------------------------------------------------------------------
2. Penanganan error menjadi lebih jelas dan dapat ditangani secara langsung dalam blok try-catch.
--------------------------------------------------------------------
3. Lebih baik untuk menangani operasi asinkron yang kompleks dengan banyak langkah.
--------------------------------------------------------------------




G. Keterbatasan async-await dengan try-catch :
1. Membutuhkan pemahaman tentang konsep async dan await, yang mungkin sedikit lebih kompleks untuk pemula.
--------------------------------------------------------------------
2. Tidak mendukung chaining secara eksplisit seperti then-catch, sehingga jika Anda memerlukan banyak operasi berturut-turut, then() mungkin lebih berguna.
--------------------------------------------------------------------




H. Perbandingan : 
<<<<<
Aspek              .then-catch                                      async-await + try-catch.
Gaya Penulisan     Berbasis chaining (berantai)                     Terlihat lebih sinkron (serial, top-down).
Penanganan Error   Error ditangani dalam .catch()                   Error ditangani dalam try-catch block.
Kebersihan Kode    Bisa menjadi berantakan jika chaining panjang    Kode lebih bersih dan mudah dibaca.
Kompleksitas       Cocok untuk operasi sederhana                    Lebih baik untuk operasi kompleks
Penggunaan         Lebih umum pada kode yang sudah ada              Lebih modern dan populer di proyek baru
>>>>>




I. Kapan Menggunakan Masing-masing?
1. Gunakan then-catch: Jika Anda sudah terbiasa dengan chaining dan memiliki operasi asinkron yang sederhana, then-catch masih merupakan pendekatan yang baik.
--------------------------------------------------------------------
2. Gunakan async-await dengan try-catch: Jika Anda menginginkan kode yang lebih bersih dan lebih mudah diikuti, terutama untuk operasi yang melibatkan beberapa langkah asinkron, async-await adalah pilihan yang lebih baik.
--------------------------------------------------------------------








































